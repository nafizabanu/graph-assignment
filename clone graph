/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/
void dfs(Node* curr,Node* node,vector<Node*> &vis){
    vis[node->val]=node;
    for(auto it:curr->neighbors){
             if(vis[it->val]==NULL){
                 Node* newNode=new Node(it->val);
                 (node->neighbors).push_back(newNode);
                 dfs(it,newNode,vis);
             }
             else{
                 (node->neighbors).push_back(vis[it->val]);
             }
        }
}

class Solution {
public:
    Node* cloneGraph(Node* node) {
        vector<Node*> vis(101,NULL);
        if(node==NULL)return NULL;
        Node* ans=new Node(node->val);
        vis[node->val]=ans;
        for(auto curr:node->neighbors){
             if(vis[curr->val]==NULL){
                 Node* newNode=new Node(curr->val);
                 (ans->neighbors).push_back(newNode);
                 dfs(curr,newNode,vis);
             }
             else{
                 (ans->neighbors).push_back(vis[curr->val]);
             }
        }
        return ans;
    }
};
