class Solution {
public:
    int timer=1;
    void dfs(int node,int par,vector<bool> &vis,vector<int> adj[],vector<int> &time,vector<int> &low,vector<vector<int>> &bridges){
        vis[node]=true;
        time[node]=timer;
        low[node]=timer;
        timer++;
        for(auto it:adj[node]){
            if(it==par)continue;
            if(!vis[it]){
                dfs(it,node,vis,adj,time,low,bridges);
                low[node]=min(low[node],low[it]);
                if(low[it]>time[node])bridges.push_back({it,node});
            }else{
                low[node]=min(low[node],low[it]);
            }

        }
    }
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        vector<int> adj[n];
        for(auto it:connections){
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        vector<bool> vis(n,0);
        vector<int>time(n),low(n);
        vector<vector<int>> bridges;
        dfs(0,-1,vis,adj,time,low,bridges);
        return bridges;
    }
};
